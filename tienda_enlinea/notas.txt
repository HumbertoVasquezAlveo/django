clase 3
Instalacion de django
pip install Django==2.2.3 > instalando django
django-admin startproject tienda_onlie > crear un proyecto
python manage.py runserver > correr el server
python manage.py createsuperuser > crear un super usuario


clase 4
hola mnundo
declarando la funcion index asociada a una url para respuesta por parte de un cliente


clase 5
Renderizar template = archivos html
definimos el folder templaes en el config
la modificamos en las urls
cambiamos la funcion en la vista


clase 6
Integraci칩n con bootstrap
copiamos los css y los js desde el sitio web de bootstrap


clase 7
Contexto en Django
los contextos se definen en la vista, no son mas que variables que se pueden usar en el template


clase 8
Ciclos y condicionales
funcionamiento de los ciclos 
{{ variable }}
{% for %}
{% endfor % }
{# este es un comentario #}


clase 9
Archivos estaticos
crear folder
modificar el settings crear una variable constante que define la ruta del folder "static"
se carga en index el load static


clase 10
super usuario
crear las migraciones > python manage.py migrate
python manage.py create superuser



clase 11
Formulario Login
obteniendo los valores del Formulario
username
password



clase 12
Autenticaci칩n

usamos authenticate y login de django
la funcion authenticate buscara en BD un usuario y contrase침a existente, luego se preguntara
si user usando login pasandole los argumentos request, user. si esto es cierto sera cierto si no sera falso



clase 13
Redirect


clase 14
Mensajes
si existe el Mensajes
condicionales con success


clase 15
Condicionar clases
se refactorizo el formulario 


clase 16
Logout
se a침adio otra url y la funcion Logout



clase 17
Formulario de Django

clase 18
Estilos en los formularios

clase 19 
Itereacion de campos


clase 20
Leer datos del formulario


example:
form = RegisterForm({
        'username': 'carlos',
        'email':'carlos@gmail.com'
        }) 

clase 21
crear usuario
Modelo User


clase 22 
validar campos
campo username
campo email


clase 23
validar campos2


clase 24 
Metodo save creado en forms.py
y llamandolo dese la vista desde la funcion Register


TEMPLATES
clase 25
Herencia de templates

clase 26
includes


clase Modelo de productos

<----  MODELOS  ----->
crear una aplicacion
python manage.py startapp products



--Administrar Modelos en el Administrador.
  Registrar el Modelo de producto en el Admin.


-- Shell de Django
    QuerySet
    Product.objects.get(id=1)
    Product.objects.all()
    Product.objects.all().count()

    cambio del atributo "description"
    product1.description = 'Cambio de descripcion'
    product1.save()
    
    trabajar el ORM de Django

    Product.objects.filter(price=20.0).first() --> retorna el primer elemento
    Product.objects.filter(price=20.0).last()  --> retorna el ultimo elemento
    Product.objects.filter(price=20.0).count()  --> retorna una cuenta
    Product.objects.filter(price=20.0).exists()  --> retorna si existe uno o mas

--Listado de productos
    

--clase ProductList --> Muestra los productos en el template objenidos desde el QuerySet
--clase DetailView  --> 

--Slug --> Se definen en el modelo de la aplicacion, luego se hace la migracion.

--Pre save   -> uso de los callbacks
  Uso de los Signal __ Signa = pre_save

-- Slug unicos

-- Imagenes

--Snippets

-- Buscador de productos
search Snippets = formulario, eenvia la informacion.
Nueva ruta 'search' ejecuta la clase ProductSearchListView, ella hace la consulta
sobreescribe el metodo QuerySet


--Relacion muchos a muchos
python manage.py startapp categories
ir a settings.py y registrar la nueva App

Se creara una relacion muchos a muchos entre los dos modelos (Product, Categories)


--Busquedas por multiples filtros

-- Respaldo de informacion

python manage.py dumpdata = muestra toda la informacion del proyecto
python manage.py dumpdata products.product = nombre de la aplicacion y del modelo
python manage.py dumpdata products.product --format=json = formato
python manage.py dumpdata products.product --format=json --indent=4 = formato

realizar una copia en JSON 
    python manage.py dumpdata products.product --format=json --indent=4 >
    products/fixtures/products.json

recuperar en base al respaldo JSON
    python manage.py loaddata products.json


TEMA 5 USUARIOS
--Proxy Model 
Es un modelo que ereda de otro
No generar nuevas tablas en la Base de datos

QuerySet
customer = Customer.objects.get(pk=1)

Relacion Uno a Uno - OneToOneField
obtener mi usuario en el SHELL
    from django.contrib.auth.models import User
    user = User.objects.get(pk=1)
    profile = Profile.objects.create(user=user, bio='Desarrollador de software')
    user.profile
    user.profile.bio
    profile.user.username

Usar Proxy Model cuando tengamos que extender nuevas funcionalidades
Uno a uno cuando queramos generar nuevos atributos a nuestro modelo

En el ejemplo de arriba se queria agregar al usuario el atributo BIO, para agregar su biografia.



--Usuarios Abstractos
AbstractUser (Atributos a utilizar)

first_name
last_name
email
password
groups
user_persissions
is_staff
is_active
is_superuser
last_login
date_joined

AbstracBaseUser (Atributos a utilizar)
id
password
last_login

ejemplos del uso de la shell en Django:
Usando el Modelo de usuario Abstracto
cargar primero el modelo User
    from users.models import User
    User.objects.all()
    <QuerySet [<User: humberto>, <User: humberto2>]>
    User.objects.all().first()
    User.objects.all().last()
    User.objects.all().last().get_full_name()
    User.objects.first().get_full_name()

cuando se cambia el modelo User por el creado propio se debe cambiar cambiar en todas las importaciones


TEMA 6 CARRITO DE COMPRAS












